=========================================================================
CAMP NETWORK REACT NATIVE SDK - REQUIREMENTS FOR APPKIT INTEGRATION
=========================================================================

Date: August 8, 2025
Project: Camp Network React Native SDK with AppKit Integration
Priority: HIGH - Production Critical

=========================================================================
EXECUTIVE SUMMARY
=========================================================================

The React Native SDK needs major updates to work properly with AppKit wallet 
integration in production React Native/Expo applications. Current SDK has 
module resolution issues, wagmi provider conflicts, and missing essential 
wallet operation methods.

=========================================================================
CRITICAL ISSUES TO FIX
=========================================================================

1. MODULE RESOLUTION FAILURES
   Status: BLOCKING
   Issue: "../dist/react-native" module cannot be resolved at runtime
   
   Required Actions:
   - Fix index.js/index.ts export structure in dist/react-native/
   - Ensure all exports are properly defined in package.json
   - Test module resolution with: node -e "require('./dist/react-native')"
   - Add proper main/module/types fields in dist/react-native/package.json

2. WAGMI PROVIDER CONFLICTS
   Status: BLOCKING
   Issue: WagmiProviderNotFoundError when using SDK hooks
   
   Required Actions:
   - Remove internal wagmi provider initialization from SDK
   - Make SDK hooks work within external WagmiProvider context
   - Use wagmi hooks from parent context, don't create new wagmi instance
   - Test SDK within this provider hierarchy:
     WagmiProvider -> QueryClientProvider -> AppKitProvider -> CampProvider

3. MISSING APPKIT WALLET OPERATIONS
   Status: HIGH PRIORITY
   Issue: useAppKit hook missing critical wallet methods
   
   Required Methods to Add:
   - signMessage(message: string): Promise<string>
   - switchNetwork(chainId: number): Promise<void>
   - sendTransaction(tx: TransactionRequest): Promise<TransactionResponse>
   - getBalance(): Promise<string>
   - getChainId(): Promise<number>
   - subscribeToAccountChanges(callback: (account) => void): () => void
   - subscribeToNetworkChanges(callback: (chainId) => void): () => void

=========================================================================
REQUIRED SDK STRUCTURE UPDATES
=========================================================================

1. MAIN EXPORTS (dist/react-native/index.ts)
   Must export ALL of these without conflicts:

   ```typescript
   // Authentication
   export { CampProvider, CampContext, useCamp } from './context/CampContext';
   export { useCampAuth, useAuthState } from './hooks/auth';
   
   // AppKit Integration  
   export { AppKitProvider, useAppKit } from './appkit/AppKitProvider';
   export { AppKitButton } from './appkit/AppKitButton';
   
   // Social & Origin
   export { useSocials, useOrigin } from './hooks';
   export { linkSocial, unlinkSocial } from './hooks/socials';
   
   // Components
   export { CampButton } from './components/CampButton';
   export { CampModal } from './components/CampModal';
   
   // Core APIs
   export { Auth as AuthRN } from './auth/AuthRN';
   export { Origin, TwitterAPI, SpotifyAPI, TikTokAPI } from '../core';
   
   // Types
   export type { LicenseTerms, IPAssetMetadata } from './types';
   ```

2. HOOK INTERFACES REQUIRED

   A. useCampAuth Hook:
   ```typescript
   interface CampAuthHook {
     // State
     authenticated: boolean;
     loading: boolean;
     walletAddress: string | null;
     error: string | null;
     
     // Actions
     connect: () => Promise<{ success: boolean; message: string; walletAddress: string }>;
     disconnect: () => Promise<void>;
     clearError: () => void;
     
     // Auth instance
     auth: AuthRN | null;
   }
   ```

   B. useAppKit Hook:
   ```typescript
   interface AppKitHook {
     // Connection state
     isAppKitConnected: boolean;
     isConnecting: boolean;
     appKitAddress: string | null;
     chainId: number | null;
     
     // Connection actions
     openAppKit: () => Promise<string>;
     disconnectAppKit: () => Promise<void>;
     
     // Wallet operations (MISSING - MUST ADD)
     signMessage: (message: string) => Promise<string>;
     switchNetwork: (chainId: number) => Promise<void>;
     sendTransaction: (tx: TransactionRequest) => Promise<TransactionResponse>;
     getBalance: () => Promise<string>;
     
     // Advanced operations (MISSING - MUST ADD)
     getProvider: () => any;
     subscribeAccount: (callback: (account: any) => void) => () => void;
     subscribeChainId: (callback: (chainId: number) => void) => () => void;
   }
   ```

   C. useSocials Hook:
   ```typescript
   interface SocialsHook {
     // Data
     socials: Record<string, boolean>;
     isLoading: boolean;
     error: Error | null;
     
     // Actions (MISSING - MUST ADD)
     linkSocial: (platform: 'twitter' | 'discord' | 'spotify') => Promise<void>;
     unlinkSocial: (platform: 'twitter' | 'discord' | 'spotify') => Promise<void>;
     refetch: () => Promise<void>;
   }
   ```

   D. useOrigin Hook:
   ```typescript
   interface OriginHook {
     stats: {
       data: any;
       isLoading: boolean;
       isError: boolean;
       refetch: () => Promise<void>;
     };
     uploads: {
       data: any[];
       isLoading: boolean;
       isError: boolean;
       refetch: () => Promise<void>;
     };
     
     // IP Asset operations (MISSING - MUST ADD)
     createIPAsset: (file: File, metadata: any, license: LicenseTerms) => Promise<string>;
     createSocialIPAsset: (source: 'twitter' | 'spotify', license: LicenseTerms) => Promise<string>;
   }
   ```

3. COMPONENT INTERFACES

   A. CampButton Component:
   ```typescript
   interface CampButtonProps {
     onPress: () => void;
     loading?: boolean;
     disabled?: boolean;
     children: React.ReactNode;  // MISSING - MUST ADD
     style?: ViewStyle | ViewStyle[];
   }
   ```

   B. CampModal Component:
   ```typescript
   interface CampModalProps {
     visible?: boolean;  // Make optional with default
     onClose?: () => void;  // Make optional
     children?: React.ReactNode;
   }
   ```

=========================================================================
APPKIT INTEGRATION REQUIREMENTS
=========================================================================

1. APPKIT PROVIDER SETUP
   Must work within this exact provider hierarchy:
   
   ```typescript
   <WagmiProvider config={wagmiConfig}>
     <QueryClientProvider client={queryClient}>
       <AppKitProvider config={{ projectId, metadata }}>
         <CampProvider clientId="...">
           <App />
         </CampProvider>
       </AppKitProvider>
     </QueryClientProvider>
   </WagmiProvider>
   ```

2. WAGMI COMPATIBILITY
   - SDK must NOT create its own WagmiProvider
   - SDK must use wagmi hooks from parent context
   - SDK must not conflict with external wagmi configuration
   - Test with wagmi@2.15.6 and @reown/appkit-wagmi-react-native

3. WALLET CONNECT PROJECT ID
   - Must support WalletConnect Project ID: 83d0addc08296ab3d8a36e786dee7f48
   - Must work with featured wallet IDs:
     * MetaMask: c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96
     * Rainbow: 1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369
     * Coinbase: fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa

=========================================================================
ENVIRONMENT COMPATIBILITY
=========================================================================

1. REACT NATIVE / EXPO REQUIREMENTS
   - Expo SDK 53+
   - React Native 0.79+
   - Support for deep linking: campnetwork://
   - AsyncStorage integration for persistence
   - Proper polyfills for crypto/Buffer operations

2. REQUIRED PEER DEPENDENCIES
   The SDK must work with these exact versions:
   ```json
   {
     "@reown/appkit-wagmi-react-native": "^1.1.0",
     "wagmi": "^2.15.6",
     "@tanstack/react-query": "^5.0.0",
     "@walletconnect/react-native-compat": "^2.16.1",
     "@react-native-async-storage/async-storage": "^2.2.0"
   }
   ```

3. POLYFILLS COMPATIBILITY
   Must work with these polyfills (already implemented):
   - window.open polyfill
   - crypto polyfills
   - Buffer polyfills
   - hasFocus protection

=========================================================================
TESTING REQUIREMENTS
=========================================================================

1. UNIT TESTS REQUIRED
   - All hook return values and methods
   - Component prop handling
   - Error state management
   - Authentication flow

2. INTEGRATION TESTS REQUIRED
   - Full provider hierarchy setup
   - Wallet connection flow
   - IP asset creation flow
   - Social account linking

3. MANUAL TESTING CHECKLIST
   ```bash
   # Test module resolution
   node -e "console.log(require('./dist/react-native'))"
   
   # Test in React Native app
   npx expo start --clear
   
   # Test wallet connection
   - Connect MetaMask
   - Connect Rainbow
   - Connect Coinbase
   
   # Test Camp authentication  
   - Auto-auth after wallet connect
   - Manual disconnect/reconnect
   
   # Test IP asset creation
   - File-based IP asset
   - Social-based IP asset (Twitter/Spotify)
   
   # Test social linking
   - Link Twitter account
   - Link Discord account
   - Link Spotify account
   ```

=========================================================================
ERROR HANDLING REQUIREMENTS
=========================================================================

1. STANDARDIZED ERROR TYPES
   ```typescript
   class CampSDKError extends Error {
     code: string;
     details?: any;
   }
   
   // Required error types:
   - WALLET_NOT_CONNECTED
   - AUTHENTICATION_FAILED  
   - TRANSACTION_REJECTED
   - NETWORK_ERROR
   - SOCIAL_LINKING_FAILED
   - IP_CREATION_FAILED
   ```

2. ERROR RECOVERY MECHANISMS
   - Automatic retry for network failures
   - Clear error states and recovery actions
   - Graceful degradation when services unavailable

=========================================================================
DOCUMENTATION REQUIREMENTS
=========================================================================

1. API DOCUMENTATION
   - Complete TypeScript interfaces
   - Usage examples for each hook
   - Integration guide with AppKit
   - Troubleshooting section

2. MIGRATION GUIDE
   - Breaking changes from current version
   - Step-by-step upgrade instructions
   - Configuration changes required

=========================================================================
DELIVERY TIMELINE
=========================================================================

Phase 1 (Week 1): CRITICAL FIXES
- Fix module resolution issues
- Remove wagmi provider conflicts
- Add missing wallet operation methods

Phase 2 (Week 2): FEATURE COMPLETION  
- Add social linking methods
- Complete IP asset creation methods
- Add proper error handling

Phase 3 (Week 3): TESTING & DOCS
- Complete testing suite
- Full documentation
- Migration guide

=========================================================================
SUCCESS CRITERIA
=========================================================================

1. SDK can be imported without module resolution errors
2. All hooks work within external WagmiProvider context  
3. Wallet operations (sign, send, switch) work properly
4. Social account linking works end-to-end
5. IP asset creation works with proper transaction signing
6. No React.jsx errors or component import failures
7. Full compatibility with Expo/React Native production apps

=========================================================================
CONTACT INFORMATION
=========================================================================

For questions or clarification:
- Development Team: [Your team contact]
- Priority: HIGH - Production Blocking
- Deadline: 3 weeks from August 8, 2025

Please confirm receipt and provide estimated timeline for these fixes.

=========================================================================
